<?php

/**
 * Enable scheduling of revision operations on arbitrary dates.
 */

/**
 * Implements hook_permission().
 */
function revision_scheduler_permission() {
  $permission['schedule revisions'] = array(
    'title' => t('Schedule revisions'),
  );
  return $permission;
}

/**
 * Implements hook_menu().
 */
function revision_scheduler_menu() {
  $items['node/%node/revisions/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file path' => drupal_get_path('module', 'node'),
  );

  $items['node/%node/revisions/schedule'] = array(
    'title' => 'Schedule',
    'page callback' => 'revision_scheduler_list_page',
    'page arguments' => array('node', 1),
    // @todo Figure out a better way to control this access.
    'access arguments' => array('schedule revisions'),
    'file' => 'revision_scheduler.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%node/revisions/schedule/add'] = array(
    'title' => 'Add scheduled revision',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('revision_scheduler_add_form', 'node', 1),
    // @todo Figure out a better way to control this access.
    'access arguments' => array('schedule revisions'),
    'file' => 'revision_scheduler.pages.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Support workbench moderation paths.
  if (module_exists('workbench_moderation')) {
    foreach ($items as $path => $item) {
      $moderation_path = str_replace('/revisions/', '/moderation/', $path);
      $items[$moderation_path] = $item;
    }
  }

  $items['revision-scheduler/%revision_scheduler_operation/run'] = array(
    'title' => 'Edit scheduled revision',
    'page callback' => 'revision_scheduler_operation_run',
    'page arguments' => array(1),
    'access arguments' => array('schedule revisions'),
    'type' => MENU_CALLBACK,
  );
  $items['revision-scheduler/%revision_scheduler_operation/edit'] = array(
    'title' => 'Edit scheduled revision',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('revision_scheduler_edit_form', 1),
    'access arguments' => array('schedule revisions'),
    'file' => 'revision_scheduler.pages.inc',
  );
  $items['revision-scheduler/%revision_scheduler_operation/delete'] = array(
    'title' => 'Cancel scheduled revision',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('revision_scheduler_delete_form', 1),
    'access arguments' => array('schedule revisions'),
    'file' => 'revision_scheduler.pages.inc',
  );

  return $items;
}

/**
 * Preprocess the add scheduled revision local action to add a destination query.
 */
function revision_scheduler_preprocess_menu_local_action(&$variables) {
  $link = &$variables['element']['#link'];
  if ($link['path'] == 'node/%/revisions/schedule/add' || $link['path'] == 'node/%/moderation/schedule/add') {
    $link['localized_options'] += array('query' => array());
    $link['localized_options']['query'] += drupal_get_destination();
  }
}

/**
 * Implements hook_admin_paths().
 */
function revision_scheduler_admin_paths() {
  $paths = array();
  if (variable_get('node_admin_theme')) {
    $paths['node/*/revisions/schedule'] = TRUE;
    $paths['node/*/revisions/schedule/add'] = TRUE;

    // Support the workbench moderation paths.
    if (module_exists('workbench_moderation')) {
      $paths['node/*/moderation/schedule'] = TRUE;
      $paths['node/*/moderation/schedule/add'] = TRUE;
    }
  }
  $paths['revision-scheduler/*'] = TRUE;
  return $paths;
}

function revision_scheduler_entity_type_has_revisions($entity_type) {
  $info = entity_get_info($entity_type);
  return !empty($info['entity keys']['revision']) && !empty($info['revision table']);
}

/**
 * Return an array of all the revision IDs of a given entity.
 */
function revision_scheduler_get_all_entity_revision_ids($entity_type, $entity, $exclude_current_revision_id = FALSE) {
  $info = entity_get_info($entity_type);

  if (empty($info['entity keys']['id']) || empty($info['entity keys']['revision']) || empty($info['revision table'])) {
    return array();
  }

  list($entity_id, $revision_id) = entity_extract_ids($entity_type, $entity);
  $id_key = $info['entity keys']['id'];
  $revision_key = $info['entity keys']['revision'];

  $query = db_select($info['revision table'], 'revision');
  $query->addField('revision', $revision_key);
  $query->condition('revision.' . $id_key, $entity_id);
  if ($exclude_current_revision_id) {
    $query->condition('revision.' . $revision_key, $revision_id, '<>');
  }
  return $query->execute()->fetchCol();
}

function revision_scheduler_get_entity_revision_key($entity_type) {
  $info = entity_get_info($entity_type);
  return !empty($info['entity keys']['revision']) ? $info['entity keys']['revision'] : FALSE;
}

/**
 * Load a single entity revision.
 *
 * @param string $entity_type
 *   An entity type.
 * @param int $entity_id
 *   An entity ID to load.
 * @param int $revision_id
 *   (optional) An entity revision ID to use when loading the entity rather
 *   than the latest revision.
 *
 * @return object
 *   An entity objects from entity_load().
 *
 * @see revision_scheduler_entity_revision_load_multiple()
 */
function revision_scheduler_entity_revision_load($entity_type, $entity_id, $revision_id = NULL) {
  if (empty($revision_id)) {
    $revisions = entity_load($entity_type, array($entity_id));
  }
  else {
    $revisions = revision_scheduler_entity_revision_load_multiple($entity_type, $entity_id, array($revision_id));
  }
  return !empty($revisions) ? reset($revisions) : FALSE;
}

/**
 * Load multiple entity revisions.
 *
 * @param string $entity_type
 *   An entity type.
 * @param int $entity_id
 *   An entity ID to load.
 * @param array $revision_ids
 *   An array of revision IDs to load.
 *
 * @return array
 *   An array of entity revision objects from entity_load().
 *
 * @see entity_load()
 */
function revision_scheduler_entity_revision_load_multiple($entity_type, $entity_id, array $revision_ids) {
  $revisions = array();
  if (is_object($entity_id)) {
    list($entity_id) = entity_extract_ids($entity_type, $entity_id);
  }
  $revision_key = revision_scheduler_get_entity_revision_key($entity_type);
  foreach ($revision_ids as $revision_id) {
    if ($entity = revision_scheduler_entity_single_load($entity_type, $entity_id, array($revision_key => $revision_id))) {
      $revisions[$revision_id] = $entity;
    }
  }
  return $revisions;
}

function revision_scheduler_entity_single_load($entity_type, $entity_id, array $conditions = array()) {
  $entities = entity_load($entity_type, array($entity_id), $conditions);
  return !empty($entities) ? reset($entities) : FALSE;
}

/**
 * Implements hook_cron_queue_info().
 */
function revision_scheduler_cron_queue_info() {
  $info['revision_scheduler'] = array(
    'worker callback' => 'revision_scheduler_operation_process',
    'time' => variable_get('revision_scheduler_cron_time', 30),
  );
  return $info;
}

/**
 * Implements hook_cron().
 */
function revision_scheduler_cron() {
  $ids = db_query("SELECT * FROM {revision_scheduler} WHERE time_scheduled <= :now AND time_queued = 0 AND time_executed = 0", array(':now' => REQUEST_TIME))->fetchCol();
  if ($operations = revision_scheduler_operation_load_multiple($ids)) {
    $queue = DrupalQueue::get('revision_scheduler');
    foreach ($operations as $operation) {
      if ($queue->createItem($operation)) {
        db_update('revision_scheduler')
          ->fields(array('time_queued' => REQUEST_TIME))
          ->condition('id', $operation->id)
          ->execute();
      }
    }
  }
}

/**
 * Process a single scheduled revision operation.
 */
function revision_scheduler_operation_process($operation) {
  $transaction = db_transaction();
  $args = array(
    '@entity-type' => $operation->entity_type,
    '@entity-id' => $operation->entity_id,
    '@operation' => $operation->operation,
    '@revision-id' => $operation->revision_id,
  );

  try {
    $entity = revision_scheduler_entity_revision_load($operation->entity_type, $operation->entity_id, $operation->revision_id);
    $operation_info = revision_scheduler_entity_revision_operation_get_info($operation->entity_type, $operation->operation);
    $entity_info = entity_get_info($operation->entity_type);

    if (empty($entity)) {
      throw new Exception(t('Failed to load entity @entity-type @entity-id.', $args));
    }
    elseif (empty($operation_info)) {
      throw new Exception(t('Failed to load revision_scheduler_entity_revision_operation_get_info(@entity-type, @operation).', $args));
    }
    elseif (empty($entity_info)) {
      throw new Exception(t('Failed to load entity_get_info(@entity-type).', $args));
    }

    // Allow modules to alter or validate the operation about to be processed.
    module_invoke_all('revision_scheduler_operation_preprocess', $entity, $operation);

    $callback = $operation_info['callback'];
    if (isset($operation_info['file'])) {
      include_once $operation_info['file'];
    }
    if (!function_exists($callback)) {
      throw new Exception(t('Revision operation @operation callback @callback does not exist.', $args + array('@callback' => $callback)));
    }

    // Run the operation callback with the entity and operation.
    $callback($entity, $operation);

    // Allow modules to react to the operation after it has been processed.
    module_invoke_all('revision_scheduler_operation_postprocess', $entity, $operation);
    watchdog('revision_scheduler', 'Performed scheduled revision operation @operation on @entity-type @entity-id revision @revision-id.', $args);

    db_update('revision_scheduler')
      ->fields(array('time_executed' => REQUEST_TIME))
      ->condition('id', $operation->id)
      ->execute();
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('revision_scheduler', $e);
  }
}

/**
 * Run a specific scheduled operation.
 */
function revision_scheduler_operation_run($operation) {
  $value = implode('-', array('run', $operation->id, $operation->operation, $operation->time_scheduled));
  if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], $value)) {
    return MENU_ACCESS_DENIED;
  }

  revision_scheduler_operation_process($operation);
  drupal_goto();
}

/**
 * Load a single scheduled revision operation from the database.
 *
 * @param int $id
 *   A scheduled operation ID.
 *
 * @return object
 *   A scheduled revision operation record.
 *
 * @see revision_scheduler_operation_load_multiple()
 */
function revision_scheduler_operation_load($id) {
  $operations = revision_scheduler_operation_load_multiple(array($id));
  return !empty($operations) ? reset($operations) : FALSE;
}

/**
 * Load multiple scheduled revision operations from the database.
 *
 * @param array $ids
 *   An array of scheduled operation IDs.
 *
 * @return array
 *   An array of scheduled revision operation records.
 */
function revision_scheduler_operation_load_multiple(array $ids) {
  if (empty($ids)) {
    return array();
  }

  $operations = db_query("SELECT * FROM {revision_scheduler} WHERE id IN (:ids)", array(':ids' => $ids))->fetchAllAssoc('id');
  return $operations;
}

/**
 * Save a scheduled revision operation to the database.
 *
 * @param object $operation
 *   A secheduled revision operation record.
 */
function revision_scheduler_operation_save($operation) {
  $operation->is_new = empty($operation->id);

  // Should we reset queued?
  //$operation->queued = 0;

  if ($operation->is_new) {
    drupal_write_record('revision_scheduler', $operation);
  }
  else {
    drupal_write_record('revision_scheduler', $operation, array('id'));
  }

  unset($operation->is_new);
}

/**
 * Delete a scheduled revision operation from the database.
 *
 * @param int $id
 *   A scheduled operation ID.
 *
 * @see revision_scheduler_operation_delete_multiple()
 */
function revision_scheduler_operation_delete($id) {
  return revision_scheduler_operation_delete_multiple(array($id));
}

/**
 * Delete multiple scheduled revision operations from the database.
 *
 * @param array $ids
 *   An array of scheduled operation IDs.
 */
function revision_scheduler_operation_delete_multiple(array $ids) {
  if ($operations = revision_scheduler_operation_load_multiple($ids)) {
    db_delete('revision_scheduler')
      ->condition('id', $ids, 'IN')
      ->execute();
  }
}

/**
 * Fetch information about entity revision operations.
 *
 * @see hook_entity_revision_operation_info()
 * @see hook_entity_revision_operation_info_alter()
 */
function revision_scheduler_entity_revision_operation_get_info($entity_type = NULL, $operation = NULL) {
  $operations = &drupal_static(__FUNCTION__);

  if (!isset($operations)) {
    $cid = 'revision:operations:info:' . $GLOBALS['language']->language;
    if ($cache = cache_get($cid)) {
      $operations = $cache->data;
    }
    else {
      $operations = module_invoke_all('entity_revision_operation_info');
      drupal_alter('entity_revision_operation_info', $operations);
      foreach ($operations as &$entity_operations) {
        foreach (array_keys($entity_operations) as $key) {
          $entity_operations[$key]['operation'] = $key;
        }
      }
      cache_set($cid, $operations);
    }
  }

  if (isset($entity_type) && isset($operation)) {
    return isset($operations[$entity_type][$operation]) ? $operations[$entity_type][$operation] : FALSE;
  }
  if (isset($entity_type)) {
    return isset($operations[$entity_type]) ? $operations[$entity_type] : array();
  }

  return $operations;
}

function revision_scheduler_operation_access($operation, $entity_type, $entity = NULL, $account = NULL) {
  $access = FALSE;

  if (isset($operation['access callback']) || isset($operation['access arguments'])) {
    $operation += array(
      'access callback' => 'user_access',
      'access arguments' => array(),
    );
    $access_callback = isset($operation['access callback']) ? $operation['access callback'] : 'user_access';
    if (is_bool($access_callback)) {
      $access = $access_callback;
    }
    else {
      $access_arguments = isset($operation['access arguments']) ? $operation['access arguments'] : array();
      $access = call_user_func_array($access_callback, $access_arguments);
    }
  }

  $access_checks = module_invoke_all('entity_revision_operation_access', $operation, $entity_type, $entity, $account);
  if (in_array(FALSE, $access_checks, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access_checks, TRUE)) {
    return TRUE;
  }

  return $access;
}

/**
 * Fetch the list of available entity revision operation that the user can add.
 */
function revision_scheduler_entity_revision_operation_get_options($entity_type, $entity = NULL, $account = NULL) {
  $options = array();
  $operations = revision_scheduler_entity_revision_operation_get_info($entity_type);

  foreach ($operations as $key => $operation) {
    if (!revision_scheduler_operation_access($operation, $entity_type, $entity, $account)) {
      unset($operations[$key]);
    }
  }

  //$operations = array_filter($operations, 'revision_scheduler_operation_access');
  foreach ($operations as $operation => $info) {
    $options[$operation] = $info['label'];
  }
  return $options;
}

/**
 * Load a single entity with an optional revision ID.
 *
 * @param string $entity_type
 *   An entity type.
 * @param int $entity_id
 *   An entity ID to load.
 * @param int $revision_id
 *   (optional) An entity revision ID to use when loading the entity rather
 *   than the latest revision.
 *
 * @return object
 *   An entity objected from entity_load().
 *
 * @see entity_load()
 */
function revision_scheduler_entity_load_by_revision($entity_type, $entity_id, $revision_id = NULL) {
  $conditions = array();
  if (!empty($revision_id)) {
    $info = entity_get_info($entity_type);
    if (isset($info['entity keys']['revision'])) {
      $conditions[$info['entity keys']['revision']] = $revision_id;
    }
  }
  $entities = entity_load($entity_type, array($entity_id), $conditions);
  return !empty($entities) ? reset($entities) : FALSE;
}

/**
 * Implements hook_field_attach_form().
 */
function revision_scheduler_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  $info = entity_get_info($entity_type);
  if ($info['entity keys']['revision'] && user_access('schedule revisions')) {
    $operations = array_merge(array('' => t('None')), revision_scheduler_entity_revision_operation_get_options($entity_type, $entity));
    $container = &$form;

    // Try to put the field in the Publish Options or Revision Information fieldset, for the case when
    // the entity_type is 'node'.
    if (isset($form['options']) && $form['options']['#type'] == 'fieldset' && $form['options']['#access']) {
      $container = &$form['options'];
    }
    elseif (isset($form['revision_information']) && $form['revision_information']['#type'] == 'fieldset' && $form['revision_information']['#access']) {
      $container = &$form['revision_information'];
    }

    $container['revision_scheduler_operation'] = array(
      '#type' => 'select',
      '#options' => $operations,
      '#title' => t('Operation'),
      '#description' => t('Please select an operation that should be scheduled.')
    );
    $container['revision_scheduler_datetime'] = array(
      '#type' => 'textfield',
      '#title' => t('Scheduled date'),
      '#default_value' => format_date(REQUEST_TIME+3600, 'custom', 'm/d/Y - H:i'),
    );

    if (module_exists('date_popup')) {
      $container['revision_scheduler_datetime']['#type'] = 'date_popup';
      $container['revision_scheduler_datetime']['#date_format'] = 'm/d/Y - H:i';
      $container['revision_scheduler_datetime']['#date_year_range'] = '0:+5';
      $container['revision_scheduler_datetime']['#date_increment'] = 1;
    }
    // Add some validation and submit handlers.
    if (isset($form['actions']) && $form['actions']['submit']['#type'] == 'submit') {
      $form['actions']['submit']['#submit'][] = 'revision_scheduler_field_form_submit';
    }
    else {
      $form['#submit'][] = 'revision_scheduler_field_form_submit';
    }
    $form['#validate'][] = 'revision_scheduler_field_form_validate';
  }
}

/**
 * Additional validation handler for the scheduler field.
 */
function revision_scheduler_field_form_validate($form, &$form_state) {
  // If the operation is not empty, check also to see if the date is not empty
  // and valid.
  if (!empty ($form_state['values']['revision_scheduler_operation'])) {
    if (empty($form_state['values']['revision_scheduler_datetime'])) {
      form_set_error('revision_scheduler_datetime', t('If you select an operation to be scheduled, you must also select a date and a time.'));
    }
    elseif (is_string($form_state['values']['revision_scheduler_datetime'])) {
      $date = strtotime($form_state['values']['revision_scheduler_datetime']);
      if ($date === FALSE) {
        form_set_error('revision_scheduler_datetime', t('Invalid date.'));
      }
    }
  }
}

/**
 * Additional submit handler for the scheduler field.
 *
 * It will actually create a new scheduled operation.
 */
function revision_scheduler_field_form_submit($form, &$form_state) {
  // Proceed only if there is a scheduled operation selected.
  if (!empty ($form_state['values']['revision_scheduler_operation'])) {
    // If we have a valid entity type, reload the entity so that we have the
    // newest revision id.
    if (isset ($form['#entity_type'])) {
      $entity_info = entity_get_info($form['#entity_type']);
      $entity_id = NULL;
      if ($entity_info && isset($entity_info['entity keys']['id'])) {
        $entity_id = $form_state['values'][$entity_info['entity keys']['id']];
        if ($entity_id) {
          // If we are here, we have a valid entity type and a valid entity id,
          // so load it first.
          $entity = revision_scheduler_entity_load_by_revision($form['#entity_type'], $entity_id);
          // Construct the scheduler object and save it.
          $operation = new stdClass();
          $operation->id = NULL;
          $operation->entity_type = $form['#entity_type'];
          $operation->entity_id = $entity_id;
          $operation->revision_id = $entity->{$entity_info['entity keys']['revision']};
          $operation->operation = $form_state['values']['revision_scheduler_operation'];
          if (is_string($form_state['values']['revision_scheduler_datetime'])){
            $operation->time_scheduled = strtotime($form_state['values']['revision_scheduler_datetime']);
          } else {
            $operation->time_scheduled = strtotime($form_state['values']['revision_scheduler_datetime']['date'] . ' ' . $form_state['values']['revision_scheduler_datetime']['time']);
          }
          $operation->time_queued = 0;
          $operation->time_executed = 0;
          revision_scheduler_operation_save($operation);
          drupal_set_message('The scheduled revision operation has been saved.');
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function revision_scheduler_form_workbench_moderation_moderate_form_alter(&$form, &$form_state, $form_id) {
  // Show the scheduled operations on the moderation form, but only on the
  // revisions list page. On the "View draft" page the messages will be printed
  // inside the workbench messages block.
  // @todo: Find a better way to check that the user is on the moderation page.
  if (isset($form['node']) && arg(2) == 'moderation' && user_access('schedule revisions')) {
    $operations = revision_scheduler_entity_revision_operation_get_options('node', $form['node']['#value']);
    $revision_schedule = revision_scheduler_get_revision_schedule($form['node']['#value']);
    $valid_operations = array();
    foreach ($revision_schedule as $key => $schedule) {
      if (!isset($form['schedule_information'])) {
        $form['schedule_information'] = array(
          '#type' => 'fieldset',
          '#title' => t('Scheduled operations'),
        );
      }
      $token_value = implode('-', array('run', $schedule->id, $schedule->operation, $schedule->time_scheduled));
      $actions = array(
        l(t('Run now'), 'revision-scheduler/' . $schedule->id . '/run', array('query' => array('token' => drupal_get_token($token_value)) + drupal_get_destination())),
        l(t('Cancel'), 'revision-scheduler/' . $schedule->id . '/delete', array('query' => drupal_get_destination()))
      );
      // Append the schedule information to the form.
      $form['schedule_information']['schedule_information_'.$key] = array(
        '#type' => 'item',
        '#markup' => t('Scheduled operation: @operation on @date !actions',
                array('@operation' => $operations[$schedule->operation],
                      '@date' => format_date($schedule->time_scheduled),
                      '!actions' => implode(' | ', $actions))),
      );
    }
  }
}

/*
 * Returns all the scheduled operations (that are not run yet) for node revision
 */
function revision_scheduler_get_revision_schedule($node_revision) {
  if (isset($node_revision->nid) && isset($node_revision->vid)) {
    $operations = db_select('revision_scheduler', 'rs')
                ->fields('rs', array('id', 'operation', 'time_scheduled'))
                ->condition('rs.entity_type', 'node')
                ->condition('rs.entity_id', $node_revision->nid)
                ->condition('rs.revision_id', $node_revision->vid)
                ->condition('rs.time_executed', 0)
                ->condition('rs.time_queued', 0)
                ->orderBy('rs.time_scheduled', 'ASC');
    return $operations->execute();
  }

  return array();
}

/*
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function revision_scheduler_form_node_form_alter(&$form, &$form_state, $form_id) {
  revision_scheduler_add_messages($form['#node']);
}

/**
 * Implements hook_node_view().
 *
 * Adds the revision schedule messages for this node.
 */
function revision_scheduler_node_view($node, $view_mode = 'full') {
  // Show moderation state messages if we're on a node page.
  if (node_is_page($node) && $view_mode == 'full' && empty($node->in_preview)) {
    revision_scheduler_add_messages($node);
  }
}

/**
 * Returns an array with scheduled operation messages formatted for workbench display.
 *
 * @param object $node_revision
 *  The node revision object.
 */
function revision_scheduler_add_messages($node_revision) {
  if (user_access('schedule revisions')) {
    // Add schedule information to the node edit form.
    $revision_schedule = revision_scheduler_get_revision_schedule($node_revision);
    $operations = revision_scheduler_entity_revision_operation_get_options('node', $node_revision);
    $messages = array();
    foreach ($revision_schedule as $key => $schedule) {
      $token_value = implode('-', array('run', $schedule->id, $schedule->operation, $schedule->time_scheduled));
      $actions = array(
        l(t('Run now'), 'revision-scheduler/' . $schedule->id . '/run', array('query' => array('token' => drupal_get_token($token_value)) + drupal_get_destination())),
        l(t('Cancel'), 'revision-scheduler/' . $schedule->id . '/delete', array('query' => drupal_get_destination()))
      );
      $messages[] = array(
        'label' => t('Scheduled operation'),
        'message' => t('@operation on @date !actions',
                      array('@operation' => $operations[$schedule->operation],
                            '@date' => format_date($schedule->time_scheduled),
                            '!actions' => implode(' | ', $actions)))
      );
    }
    if ($messages) {
      module_invoke('workbench_moderation', 'set_message', $messages);
    }
  }
}

/**
 * @name revision_scheduler_node Revision scheduler integration on behalf of node.module.
 * @{
 */

/**
 * Implements hook_entity_revision_operation_info() on behalf of node.module.
 */
function node_entity_revision_operation_info() {
  $operations['node']['unpublish'] = array(
    'label' => t('Unpublish'),
    'access callback' => TRUE,
    'callback' => 'node_node_revision_operation_set_status',
  );
  $operations['node']['publish'] = array(
    'label' => t('Publish'),
    'access callback' => TRUE,
    'callback' => 'node_node_revision_operation_set_status',
  );
  $operations['node']['revert'] = array(
    'label' => t('Revert'),
    'access arguments' => array('revert revisions'),
    'callback' => 'node_node_revision_operation_revert',
  );
  $operations['node']['delete'] = array(
    'label' => t('Delete'),
    'access arguments' => array('delete revisions'),
    'callback' => 'node_node_revision_operation_delete',
  );

  return $operations;
}

/**
 * Node revision operation callback: revert to revision.
 */
function node_node_revision_operation_revert($node) {
  $node->revision = 1;
  $node->log = t('Copy of the revision from %date.', array('%date' => format_date($node->revision_timestamp)));
  node_save($node);
  drupal_set_message(t('@type %title has been reverted back to the revision from %revision-date.', array('@type' => node_type_get_name($node), '%title' => $node->title, '%revision-date' => format_date($node->revision_timestamp))));
}

/**
 * Node revision operation callback: delete revision.
 */
function node_node_revision_operation_delete($node) {
  node_revision_delete($node->vid);
  drupal_set_message(t('Revision from %revision-date of @type %title has been deleted.', array('%revision-date' => format_date($node->revision_timestamp), '@type' => node_type_get_name($node), '%title' => $node->title)));
}

/**
* Node revision operation callback: unpublish revision.
*/
function node_node_revision_operation_set_status($node, $operation) {
  if ($operation->operation == 'publish') {
    $node->status = 1;
    $node->log = t('Scheduled publish.');
    node_save($node);
    if (module_exists('workbench_moderation')) {
      workbench_moderation_moderate($node, 'published');
    }
  }
  else if ($operation->operation == 'unpublish') {  
    $node->log = t('Scheduled unpublish.');  
    if (module_exists('workbench_moderation')) {
        
        $form = array();
        $form['node']['#value']=$node;
        $formstate = array();
        $formstate['values']['state'] = 'draft';    
        if (!function_exists('workbench_moderation_node_unpublish_form_submit')){
            module_load_include('inc', 'workbench_moderation', 'workbench_moderation.node');
        }
        workbench_moderation_node_unpublish_form_submit($form ,$formstate);
        
        return;
    }  
    $node->status = 0;
    node_save($node);
  }
  
}

/**
 * Implements hook_entity_revision_operation_access().
 */
function node_entity_revision_operation_access($operation, $entity_type, $entity, $account) {
  if (!empty($entity) && $entity_type == 'node') {
    if (function_exists('workbench_moderation_node_type_moderated') && workbench_moderation_node_type_moderated($entity->type)) {
     return TRUE;
    }
    if (!node_access('update', $entity, $account)) {
      return FALSE;
    }
  }
}

/**
 * @} End of "name revision_scheduler_node".
 */

/**
 * @name revision_scheduler_workbench_moderation Revision scheduler integration on behalf of workbench_moderation.module.
 * @{
 */

/**
 * Implements hook_entity_revision_operation_info().
 */
function workbench_moderation_entity_revision_operation_info() {
 // return ; //We dont need scheduled moderation workflow states here. This might be confusing. Only scheduled publish/depublish/delete/revert
    
  $info = array();
  $states = workbench_moderation_state_labels();
  foreach ($states as $state => $label) {
    $info['node']['workbench_moderation_' . $state] = array(
      'label' => t('Moderate to @label', array('@label' => $label)),
      'access callback' => TRUE,
      'callback' => 'workbench_moderation_revision_operation_process',
    );
  }
  return $info;
}

/**
 * Implements hook_entity_revision_operation_access().
 */
function workbench_moderation_entity_revision_operation_access($operation, $entity_type, $entity, $account) {
  if (strpos($operation['operation'], 'workbench_moderation_') !== FALSE && !empty($entity) && $entity_type == 'node') {
    //$state = substr($operation['operation'], 21);
    if (!workbench_moderation_node_type_moderated($entity->type)) {
      return FALSE;
    }
  }
}

/**
 * Revision operation process callback for scheduled moderation state changes.
 */
function workbench_moderation_revision_operation_process($entity, $operation) {
  // Extract the transition to state from the operation key: 'workbench_moderation_state'.
  $state = substr($operation->operation, 21);
  workbench_moderation_moderate($entity, $state);
}

/**
 * @} End of "name revision_scheduler_workbench_moderation".
 */
