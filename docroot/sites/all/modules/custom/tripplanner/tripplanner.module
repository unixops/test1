<?php
/**
* @file
* A block .
*/
?>

<?php
/**
 * Implements hook_init().  setup the tripplanner autocomplete callback data
 */
function tripplanner_init(){
	global $loc_array;
	//$tp_start = microtime(true);
	$loc_array=array();
	$loc_array = variable_get('tp_array','');
	if (empty($loc_array)){
		$path = drupal_get_path('module', 'tripplanner');
		//the file landmarks.js has all the location information needed for the TripPlanner suggestions);
		$array = split("\n", file_get_contents($path."/landmarks.js"));
		
		// the 7th element has the big string we need to parse
		// the big string we want starts with a " so get it by doing another split
		
			$bigstring=split('"',$array[6]);
		
		// each location is a series of 5 elements seperated by ':::'	
			
			$loc_strings=split(':::',$bigstring[1]);
		// we put each element into it's own array so we can use them later
			foreach ($loc_strings as $loc_string){
				$loc_split = array();
				$loc_split = split('\$',$loc_string);
				$loc_array['lat'][]=$loc_split[0];
				$loc_array['lon'][]=$loc_split[1];
				$loc_array['text'][]=$loc_split[2];
				$loc_array['type'][]=$loc_split[3];
				$loc_array['sub'][]=$loc_split[4];
			}
			//dsm('doing update');
		// we save the array as a Drupal variable for next time through
			variable_set('tp_array',$loc_array);
	}
	//dsm(number_format((microtime(true)-$tp_start)*1000,3).' mS');
}
function tripplanner_menu()
{

	$menu['tripplaner_from/autocomplete'] = array(
    'page callback' => '_tripplaner_from_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  	$menu['tripplaner_to/autocomplete'] = array(
    'page callback' => '_tripplaner_to_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
	return $menu;
}
/**
* Implements hook_block_info().
*/
function tripplanner_block_info() {
  $blocks['tripplanner'] = array(
    'info' => t('Tripplanner'), //The name that will appear in the block list.
    'cache' => DRUPAL_CACHE_PER_ROLE, //Default
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
 function tripplanner_block_view($delta = '') {
  switch($delta){
    case 'tripplanner':
      $block['subject'] = '';
      if(user_access('access content')){
   $block['content']=drupal_get_form('tripplanner_form');
      }
  
  return $block;
  }
 }
/**
 * Implements hook_form().  Register a new form
 */
 function tripplanner_form($form, &$form_state) {
  $form = array();

  $form['txtorigininput'] = array(
    '#title' => t('From'),
    '#type' => 'textfield',
    '#required' => TRUE,
  

//    	'#size' => '100%',
    '#autocomplete_path' => 'tripplaner_from/autocomplete',
    );
  $form['txtdestinationinput'] = array(
    '#title' => t('To'),
    '#type' => 'textfield',
    '#required' => TRUE,
  

//    	'#size' => '100%',
    '#autocomplete_path' => 'tripplaner_to/autocomplete',
    );
  // Access log settings:
  $options = array('1' => t('Depart at'), '0' => t('Arrive by'));

  $form['tp_arrv_dep'] = array(
    '#type' => 'radios',
    '#title' => 'Choose:',
    '#required' => TRUE,
  
    '#default_value' =>  1,
    '#options' => $options,
  );
    
   $form['tp_date'] = array(
  '#type' => 'date_popup',
  '#title' => t('Trip Date &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and &nbsp;&nbsp;&nbsp;&nbsp; Time'),
  '#size' => 7,
  '#maxlength' => 7,
  '#required' => TRUE,
  '#date_format' => 'n/j/y g:i' // With this format you'll get a date popup box AND a time widget. Obviously you can change this to whatever you need.
);
  $form['tp_use'] = array(
    '#type' => 'fieldset',
    '#title' => t('Using:'),
  );
  $form['tp_use']['tp_bus'] = array(
    '#type' => 'checkbox',
    '#title' => t('Bus'),
    '#default_value' => true,
  );
  $form['tp_use']['tp_subway'] = array(
    '#type' => 'checkbox',
    '#title' => t('Subway'),
    '#default_value' => true,
  );
    $form['tp_use']['tp_rail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Rail'),
    '#default_value' => true,
  );
    $form['tp_use']['tp_expressbus'] = array(
    '#type' => 'checkbox',
    '#title' => t('Express Bus'),
    '#default_value' => false,
  );

   $form['tp_accessable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Accessible Trip?'),
    '#default_value' => false,
  ); 
  $form['submit'] = array(
  	'#prefix'=>'<div id="tp_submit">',
    '#type' => 'submit',
    '#value' => 'Submit',
    '#suffix'=>'</div>',
  
  );
  $form['tp_links'] = array(
  '#markup'=>'<div id="tp_links"><p style="margin:10px 0 0 6px;"><span class="list_h"><a style="color:#555;" href="#" onclick="SmartTripClick('."ADVANCEOPTION','' ,'' )".'">Advanced</a></span> <span class="list_h"><a style="color:#555;" href="http://tripplanner.mta.info/MyTrip/common/help.aspx">Help</a></span> <span class="list_h"><a style="color:#555;" href="http://511ny.org/tripplanner/default.aspx?area=1">511NY</a></span></p><p style="margin:0 0 0 6px;"><span class="list_h"><a style="color:#555;" href="/nyct/service/OnTheGo.htm">Go Mobile</a></span> <span class="list_h"><a style="color:#555;" href="http://tripplanner.mta.info/MyTrip/common/widgetSelector.aspx">Get Widget</a></span></p></div>',
  );
  // Get the path to the module
$path = drupal_get_path('module', 'tripplanner');
// Attach the CSS and JS to the form
$form['#attached'] = array
(
	'css' => array
	(
		'type' => 'file',
		'data' => $path . '/tripplanner.css',
	),
	'js' => array
	(
		array ('type' => 'file',
				'data' => $path . '/tripplanner.js',
		),

//		array ('type' => 'file',
//		'data' => $path . '/tripplanner.ext.js',
//		),

	),
);
  return $form;
}

/**
 * Implements the autocomplete callback().  
 */
function _tripplaner_from_autocomplete($string) {
		$tp_start = microtime(true);
	
	// here is where we look for and return the auto complete choices based on the users input
	//$loc_array = variable_get('tp_array','');
		
		global $loc_array;
  if ($string) {
    $results = array();

    $count = 0;
    // Search landmark array for matches
      foreach ($loc_array['text'] as $val) {
      	$pos_match = stripos($val, $string);
        if ($pos_match === 0) {
          $results[$val] = $val;
          // Limit to 20 results
          if (++$count >= 20) {
            break;
          }
        }
      }
    }
    // Search from existing submissions
    // Only fire the query if we have fewer than 20 results already
    // Sort php and sql results together
    dsm('autocomplete "From" callback time '.number_format((microtime(true)-$tp_start)*1000,3).' mS');
    
    drupal_json_output($results);
  }
  /**
 * Implements the autocomplete callback().  
 */
function _tripplaner_to_autocomplete($string) {
		$tp_start = microtime(true);
	
	// here is where we look for and return the auto complete choices based on the users input
	//$loc_array = variable_get('tp_array','');
		
	   global $loc_array;
  if ($string) {
    $results = array();

    $count = 0;
    // Search from prepulated options
      foreach ($loc_array['text'] as $val) {
        if (stripos($val, $string) !== FALSE) {
          $results[$val] = $val;
          // Limit to 20 results
          if (++$count >= 20) {
            break;
          }
        }
      }
    }
    // Search from existing submissions
    // Only fire the query if we have fewer than 20 results already
    // Sort php and sql results together
    dsm('autocomplete "To" callback time '.number_format((microtime(true)-$tp_start)*1000,3).' mS');
    
    drupal_json_output($results);
  }  
/**
 * Implements hook_theme().  Register a theme function
 */

function tripplanner_theme()
{
	return array
	(
		'tripplanner_form' => array
		(
			'render element' => 'form' // we just pass the whole form
		),
	);
}

/**
 * Implements theme_hook(). Perform a theme function
 */

function theme_tripplanner_form($vars) {
	
	$form=$vars['form']; // our form is passed in $vars
	
	// Here we add the markup for the overall trip planner block
  $output = '<div class="feature-box roundCorners" id="mytrip">

<h2 class="tp-logo"><span></span></h2>';
 // now we use drupal_render to turn the form elements into HTML and add it the output buffer
  $output .= drupal_render($form['txtorigininput']);
  $output .= drupal_render($form['txtdestinationinput']);
  $output .= drupal_render($form['tp_date']);
  $output .= drupal_render($form['tp_arrv_dep']);
  $output .= drupal_render($form['tp_use']);
  $output .= drupal_render($form['tp_accessable']);  
  $output .= drupal_render($form['submit']);
 
  // Finially, we need to render the Drupal "magic fields" using a different function 
  $output .= drupal_render_children($form);
  
  //Close the markup
  $output .= '</div>';
  // return the finsihed HTML
  return $output;
}